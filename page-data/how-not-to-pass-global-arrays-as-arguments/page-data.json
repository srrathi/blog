{"componentChunkName":"component---src-components-templates-blog-post-js","path":"/how-not-to-pass-global-arrays-as-arguments","result":{"data":{"markdownRemark":{"frontmatter":{"title":"Facing the Dangling pointer problem","date":"27/9/2020","tags":["programming","function arguments","variables"]},"html":"<blockquote>\n<p>This problem helped me better understand variable referencing </p>\n</blockquote>\n<hr>\n<h2>Problem</h2>\n<p>Let's first look at the code to understand where I saw the problem.\nFor some context here is the part of the code and just to make it more clear, the <code>endSession</code> function is arbitrarily called, which then calls the <code>batchData</code> function, which; if condition satisfies; calls the <code>sendData</code> function.</p>\n<pre><code>let batch = [];\n\nconst sendData = (batch, batchTime) => {\n\n  // Sending Data\n  const data = {\n    batch: batch,\n    batchTime: batchTime\n  }\n  const url = \"SERVER_ENDPOINT\";\n  fetch(url , { \n    method: \"POST\", \n    body: JSON.stringify(data), \n    headers: { \n        \"Content-type\": \"application/json\"\n    } \n  })\n  \n  // emptying the batch\n  batch = []\n  console.log(\"Batch after sending data\", batch)\n  \n}\n\nconst batchData = (data) => {\n  if ( /* Checking condition as to whether or not to send data*/ ){\n    sendData(batch, Date.now());\n  }\n  batch(data)\n  console.log(\"Batch after batching\", batch)\n}\n\nconst endSession = (user, data, currentTime) => {\n  tracking[user].data = data;\n  trackingData[tabid].currentTime = currentTime;\n  batchData({ userData: tracking[user] });\n}\n</code></pre>\n<p>The people who are actual programmars can see the problem quite easily but beginners like me might still be in the blind.</p>\n<p>The problem was that whenever the condition in the <code>batchData</code> function was met, the data in the<code>batch</code> array would be sent to the server by executing the <code>sendData</code> function and now the <code>batch</code> array; which I expected to become empty with the <code>batch = []</code>; did not become empty. </p>\n<p>This lead to <strong>data from previous batches also being sent to the server.</strong></p>\n<h2>Technical behaviour</h2>\n<p>To understand this, we have to revise a few things:</p>\n<ol>\n<li>A variable is <strong>a reference to a memory location</strong>. </li>\n<li>There are two ways to pass varibables to a function, <code>call by reference</code> and <code>call by value</code>; and <strong>arrays are passed as arguments to functions thorough call by reference</strong></li>\n</ol>\n<p>The problem is only in the part where I call the <code>sendData</code> function.<br>\nThroughout the code, <code>batch</code> array has been referenced as a <em>global variable</em> but when I called the <code>sendData</code> function, I passed it as an argument.<br>\nThis created another reference to that memory location inside the <code>sendData</code> function.(<em>think of it as another pointer</em>) <br>\nThus, the line <code>batch = []</code>, does not change the content of the global <code>batch</code> array. Instead, it assigns a new memory location with an empty array value to the newly made <code>batch</code> reference that is inside the <code>sendData</code> function.</p>\n<blockquote>\n<p>This problem is called the <a href=\"https://developerinsider.co/what-is-dangling-pointer-with-cause-and-how-to-avoid-it/\"><strong>Dangling pointer</strong> problem</a></p>\n</blockquote>\n<h2>Solution</h2>\n<p>Just didn't send the variable as an argument to the function and referenced it directly as a global object.<br>\n(<em>now that I look at it, maybe this confusion was all because of improper variable naming</em>)</p>\n<hr>"}},"pageContext":{"slug":"how-not-to-pass-global-arrays-as-arguments"}},"staticQueryHashes":["2199005656","3159585216"]}